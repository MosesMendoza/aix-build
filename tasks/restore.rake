
# restore an AIX partition
#
def bos_inst_restore(args = {})
  nim_master      = args[:nim_master]
  nim_master_user = args[:nim_master_user]
  nim_user        = args[:nim_user]
  nim_client      = args[:nim_client]
  type            = args[:type]
  spot            = args[:spot]
  mksysb          = args[:mksysb]
  fb_script       = args[:fb_script]
  os_ver          = args[:os_ver]

  # Initiate the restore via remote command
  #
  sh "sudo su - aixcontroller -c \"ssh -t #{nim_master_user}@#{nim_master} \
  'nim -o bos_inst    \
  -a source=#{type}   \
  -a spot=#{spot}     \
  -a mksysb=#{mksysb} \
  -a boot_client=yes  \
  -a fb_script=#{fb_script} #{nim_client}'\""

  # Sit in our polling loop until we have a ready file
  # the ready file is generated by the builder after a
  # restore
  #
  ready_file = File.join("/srv/aix/#{os_ver}/.ready")
  STDOUT.sync = true
  until File.exist?(ready_file)
    STDOUT.print '.'
    sleep 1
  end
  STDOUT.puts "Builder restored"
  rm_rf ready_file
end

# Obviously we're going to pull out these hardcoded values into
# the data.yml file and load them in appropriately.
# We may even dynamically define these restore tasks based on
# the builders listed in the yaml file
#
desc "Restore the AIX 7.1 builder to a pristine builder"
task :restore_71 do
  args = {
    :nim_master       => @nim_master,
    :nim_master_user  => 'root',
    :nim_user         => @nim_user,
    :nim_client       => 'pe-aix-71-builder',
    :type             => 'mksysb',
    :spot             => '7102_spot',
    :mksysb           => 'pe_aix_71_builder_template_keyed_mksysb',
    :fb_script        => 'builder_setup_fb_script',
    :os_ver           => '7.1'
  }
  bos_inst_restore(args)
end

#@builders.each do |builder|
#  desc "Restore #{builder} to a pristine builder"
#  task :restore
#end

